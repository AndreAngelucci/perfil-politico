from collections import namedtuple
from logging import getLogger
from textwrap import dedent
from unidecode import unidecode

from django.core.exceptions import ObjectDoesNotExist
from Levenshtein import distance

from perfil.mandate.models import ClaimedIndemnification, Politician
from perfil.utils.management.commands import ImportCsvCommand
from perfil.utils.tools import parse_date, parse_decimal


log = getLogger(__name__)
Name = namedtuple('Name', ('politician', 'levenshtein_distance'))


class Command(ImportCsvCommand):

    help = dedent("""
        Import CSV generated by:
        https://github.com/okfn-brasil/serenata-toolbox

        Import data from the Chamber of Deputies and the Federal Senate.
    """)
    model = ClaimedIndemnification
    bulk_size = 2 ** 11
    slice_csv = False

    @staticmethod
    def get_politician(name):
        """Use trigram-similar and Levenshtein to match politicians name"""
        def get_distance(name1, name2):
            name1, name2 = (unidecode(name.lower()) for name in (name1, name2))
            return distance(name1, name2)

        qs = Politician.objects.filter(congressperson_name__trigram_similar=name)
        names = tuple(
            Name(obj, get_distance(name, obj.congressperson_name))
            for obj in qs
        )

        if not names:
            log.info(f'No match for {name}')
            return None

        selected = min(names, key=lambda name: name.levenshtein_distance)
        log.info(f'Matching {name} with {selected.politician.congressperson_name}')
        return selected.politician

    def get_deputy(self, line):
        try:
            return Politician.objects.get(
                area='1',
                congressperson_id=line['congressperson_id']
            )
        except ObjectDoesNotExist:
            return self.get_politician(line['congressperson_name'])

    def get_senator(self, line):
        name = line['congressperson_name']
        try:
            return Politician.objects.get(
                congressperson_name__unaccent__icontains=name
            )
        except (ObjectDoesNotExist, Politician.MultipleObjectsReturned):
            return self.get_politician(name)

    def chamber_serializer(self, line, data=None):
        politician = self.get_deputy(line)
        if politician:
            data = data or dict()
            data['politician'] = politician
            data['category'] = line['subquota_description']
            data['sub_category'] = line['subquota_group_description']
            data['date'] = parse_date(line['issue_date'])
            data['value'] = parse_decimal(line['total_net_value'].replace(',', '.'))
            return ClaimedIndemnification(**data) if data['value'] else None

    def senate_serializer(self, line, data=None):
        politician = self.get_senator(line)
        if politician:
            data = data or dict()
            data['politician'] = politician
            data['category'] = line['expense_type']
            data['date'] = parse_date(line['date'])
            data['value'] = parse_decimal(line['reimbursement_value'].replace(',', '.'))
            return ClaimedIndemnification(**data) if data['value'] else None

    def serialize(self, reader, total, progress_bar):
        common_keys = ('cnpj_cpf', 'supplier', 'year', 'month')
        for line in reader:
            obj = {key: line[key] for key in common_keys}
            obj['claim_id'] = line['document_id'] or ''

            if 'congressperson_document' in line.keys():
                yield self.chamber_serializer(line, obj)
            else:
                yield self.senate_serializer(line, obj)

from textwrap import dedent

from perfil.election.management.commands import election_keys
from perfil.election.models import Donation, Election
from perfil.utils.management.commands import ImportCsvCommand
from perfil.utils.tools import parse_date, parse_decimal, parse_document


class Command(ImportCsvCommand):

    help = dedent("""
        Import CSV generated by: https://github.com/rafapolo/tribuna

        Organize data in a MySQL database as described in the instructions and
        then export a CSV with:

            SELECT *
            FROM doacoes
            WHERE tipo = "candidato"
            INTO OUTFILE '/path/to/some/dir/doacoes.csv'
            FIELDS TERMINATED BY ','
            ENCLOSED BY '"'
            LINES TERMINATED BY '\';

        You might have to add the following settings to your my.cnf:

            [mysqld]
            secure_file_priv=""

            [client]
            loose-local-infile=1
    """)

    to_cache = (Election, election_keys),
    model = Donation
    bulk_size = 2 ** 10
    headers = (
        'id',
        'uf',
        'partido',
        'cargo',
        'candidato',
        'numero',
        'ano',
        'cpf_candidato',
        'doador_original',
        'doador',
        'cpf_doador',
        'cpf_doador_original',
        'recurso',
        'setor_economico',
        'data',
        'motivo',
        'fonte',
        'valor',
        'valor_at',
        'tipo'
    )

    def serialize(self, reader):
        for row in reader:
            for key, value in row.items():
                if value == '\\N':  # MySQL default for NULL values as string
                    row[key] = None

            for key in ('cpf_doador', 'cpf_doador_original'):
                row[key] = parse_document(row[key])

            for keys in row.keys():
                row[key] = row[key] if row[key] else ''

            election_id = self.cache.get(election_keys(row))
            if election_id and row.get('doador'):
                data = {key: value for key, value in row.items() if value}
                yield Donation(
                    election_id=election_id,
                    donator=data['doador'],
                    donator_id=data.get('cpf_doador', ''),
                    original_donator=data.get('doador_original', ''),
                    original_donator_id=data.get('cpf_doador_original', ''),
                    date=parse_date(data.get('data')),
                    value=parse_decimal(data.get('valor')),
                    description=data.get('recurso', '')
                )
            else:
                yield None
